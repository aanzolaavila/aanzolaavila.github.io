<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>hash on Terminal</title><link>https://aanzolaavila.github.io/tags/hash/</link><description>Recent content in hash on Terminal</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 17 Aug 2022 23:26:38 -0500</lastBuildDate><atom:link href="https://aanzolaavila.github.io/tags/hash/index.xml" rel="self" type="application/rss+xml"/><item><title>What I Learned From Hash Functions</title><link>https://aanzolaavila.github.io/posts/what-i-learned-from-hash-functions/</link><pubDate>Wed, 17 Aug 2022 23:26:38 -0500</pubDate><guid>https://aanzolaavila.github.io/posts/what-i-learned-from-hash-functions/</guid><description>During 2019-2 semester I had the opportunity to do a research exchange to the US, did some research on Blockchain technologies and took a course on Applied Cryptography.
While I am not going to talk about Blockchain in here, I will talk about Cryptography, hash functions in particular. Before this, I had a very limited idea of a lot of the concepts that are required from hash functions.
Before going there I only had the brief idea that a hash function is a one-way function.</description><content>&lt;p>During 2019-2 semester I had the opportunity to do a research exchange to the US, did some research on Blockchain technologies and took a course on &lt;em>Applied Cryptography&lt;/em>.&lt;/p>
&lt;p>While I am not going to talk about Blockchain in here, I will talk about Cryptography, hash functions in particular. Before this, I had a very limited idea of a lot of the concepts that are required from hash functions.&lt;/p>
&lt;p>Before going there I only had the brief idea that a hash function is a one-way function. Roughfly that you can calculate its output from the input easily, but you cannot get the input from the output.&lt;/p>
&lt;p>And with that definition it was enough to know that a lot of security applications rely deeply on them, and a lot of things would not be possible without them, such as Blockchain. But still I had no idea of what they needed to fulfill to be considered a good hash function.&lt;/p>
&lt;p>So, without further ado, I&amp;rsquo;ll dive in.&lt;/p>
&lt;hr>
&lt;h1 id="hash-function">Hash function&lt;/h1>
&lt;blockquote>
&lt;p>A hash function is a one-way function &lt;span class="has-mathjax">\( h \)&lt;/span>
such that for a given input &lt;span class="has-mathjax">\( x\in\{0, 1\}^{n} \)&lt;/span>
, also called as &lt;em>pre-image&lt;/em>, gives an output &lt;span class="has-mathjax">\( y\in\{0, 1\}^{d} \)&lt;/span>
, also known as &lt;em>image&lt;/em>, where &lt;span class="has-mathjax">\( n \)&lt;/span>
is of any size and &lt;span class="has-mathjax">\( d \)&lt;/span>
is a constant, both are number of bits.&lt;div class="has-mathjax">
\[ y = h(x) \]
&lt;/div>
&lt;/p>
&lt;/blockquote>
&lt;hr>
&lt;h1 id="properties">Properties&lt;/h1>
&lt;p>Now, an ideal hash function has many security properties, but the need for each of them goes mainly on what use it is going to get.&lt;/p>
&lt;h2 id="pre-image-resistance-pr">Pre-image resistance (PR)&lt;/h2>
&lt;blockquote>
&lt;p>Given the output &lt;span class="has-mathjax">\( y \)&lt;/span>
, it is &lt;strong>infeasible&lt;/strong> to find any input &lt;span class="has-mathjax">\( x \)&lt;/span>
such that &lt;span class="has-mathjax">\( h(x) = y \)&lt;/span>
.&lt;/p>
&lt;/blockquote>
&lt;p>This means that knowing the output &lt;span class="has-mathjax">\( y \)&lt;/span>
and the hash function &lt;span class="has-mathjax">\( h \)&lt;/span>
it takes a lot of work to find an input that gives us that same output.&lt;/p>
&lt;p>The term &lt;em>infeasible&lt;/em> in here refers to the fact that you would need &lt;strong>a lot&lt;/strong> of computer power to get the input, and that input may not be equal to the one that actually gave that output in the first place.&lt;/p>
&lt;hr>
&lt;h2 id="infeasibility">Infeasibility&lt;/h2>
&lt;p>The size of the output &lt;span class="has-mathjax">\( d \)&lt;/span>
should be big enough to make any attacker do at least &lt;span class="has-mathjax">\( 2^{112} \)&lt;/span>
attempts of work to break it. &lt;em>This value could change in the future as computer computing capability is increasing&lt;/em>.&lt;/p>
&lt;p>Furthermore, these properties make the problem even more difficult.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>The output of &lt;span class="has-mathjax">\( h \)&lt;/span>
is uniform &lt;br>
The probability of each bit on &lt;span class="has-mathjax">\( y \)&lt;/span>
to be either 0 or 1 is 1/2.&lt;/p>
&lt;div class="has-mathjax">
\[ \forall i \in \{1, \ldots, d\} ,\; P(y_i = 1) = P(y_i = 0) = \frac{1}{2} \]
&lt;/div>
&lt;/li>
&lt;li>
&lt;p>Avalanche effect &lt;br>
Given inputs &lt;span class="has-mathjax">\( x_1, x_2 \)&lt;/span>
such that &lt;span class="has-mathjax">\( x_1 \approxeq x_2 \)&lt;/span>
then
&lt;span class="has-mathjax">\[ h(x_1) \neq h(x_2) \]&lt;/span>
They should differ in at least 50% of the output bits. &lt;em>It should be sufficient to change just one bit.&lt;/em>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>The probability &lt;span class="has-mathjax">\( P(\text{output} = \text{a specific output}) = \frac{1}{2^d} \)&lt;/span>
&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="collision-resistance-cr">Collision Resistance (CR)&lt;/h2>
&lt;blockquote>
&lt;p>It is &lt;em>infeasible&lt;/em> to find any &lt;span class="has-mathjax">\( x, x^{\prime} \)&lt;/span>
such that &lt;span class="has-mathjax">\( h(x) = h(x^{\prime}) \)&lt;/span>
&lt;/p>
&lt;/blockquote>
&lt;p>This means that we only know the function &lt;span class="has-mathjax">\( h \)&lt;/span>
, an that is it. It should be very hard to find any pair of different inputs such that they are equal.&lt;/p>
&lt;hr>
&lt;h2 id="weak-collision-resistance-wcr">Weak Collision Resistance (WCR)&lt;/h2>
&lt;blockquote>
&lt;p>Given an input &lt;span class="has-mathjax">\( x \)&lt;/span>
, it is &lt;em>infeasible&lt;/em> to find &lt;span class="has-mathjax">\( x^{\prime} \neq x \)&lt;/span>
such that &lt;span class="has-mathjax">\( h(x^{\prime}) = h(x) \)&lt;/span>
&lt;/p>
&lt;/blockquote>
&lt;p>This problem is similar to CR, but it has a key difference: &lt;em>we know one of the inputs&lt;/em>, and we are tasked to find another input such that their outputs are equal.&lt;/p>
&lt;p>It may seem counter-intuitive, but this problem is harder than CR.&lt;/p>
&lt;hr>
&lt;p>Assuming that the hash function used is well designed to take all of these properties into consideration, a good question to ask would be: what is the minimum size &lt;span class="has-mathjax">\( d \)&lt;/span>
from the output to guarantee all of them?&lt;/p>
&lt;p>The answer depends on each property, let&amp;rsquo;s start with PR. Assume that we run &lt;span class="has-mathjax">\( h \)&lt;/span>
with &lt;span class="has-mathjax">\( m \)&lt;/span>
different inputs. How many pre-images will we find?&lt;/p>
&lt;p>Remember, we want an attacker to at least to &lt;span class="has-mathjax">\( 2^{112} \)&lt;/span>
attempts.&lt;/p>
&lt;p>How many do we need to get at least one pre-image?
&lt;div class="has-mathjax">
\[ \mathop{\mathbb{E}}[\text{# of pre-images}] = (\text{number of chances}) \times (\text{probability of a chance}) \]
&lt;/div>
&lt;/p>
&lt;div class="has-mathjax">
\[ 1 = m \times \frac{1}{2^{d}} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ m = 2^{d} \]
&lt;/div>
&lt;p>[&lt;span class="has-mathjax">\( m \)&lt;/span>
should be at least &lt;span class="has-mathjax">\( 2^{112} \)&lt;/span>
]&lt;/p>
&lt;div class="has-mathjax">
\[ 2^{112} = 2^{d} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ d \ge 112 \]
&lt;/div>
&lt;hr>
&lt;p>Similarly, to get the value for CR, lets do this:&lt;/p>
&lt;p>Pick a random &lt;span class="has-mathjax">\( x_{i} \in \{0, 1\}^{\ast} \)&lt;/span>
, compute &lt;span class="has-mathjax">\( y_{i} = h(x_{i}) \)&lt;/span>
, store &lt;span class="has-mathjax">\( y_{i} \)&lt;/span>
. Does it match any previous &lt;span class="has-mathjax">\( y_{i} \)&lt;/span>
? If yes, then halt. Repeat &lt;span class="has-mathjax">\( m \)&lt;/span>
times.&lt;/p>
&lt;div class="has-mathjax">
\[ \mathop{\mathbb{E}}[\text{# of collitions}] = (\text{number of chances}) \times (\text{probability of a chance}) \]
&lt;/div>
&lt;div class="has-mathjax">
\[ \mathop{\mathbb{E}}[\text{# of collitions}] = \binom{m}{2} \times \frac{1}{2^{d}} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ \mathop{\mathbb{E}}[\text{# of collitions}] = \frac{m(m-1)}{2} \times \frac{1}{2^{d}} \]
&lt;/div>
&lt;p>[We want at least one collision]&lt;/p>
&lt;div class="has-mathjax">
\[ 1 = \frac{m(m-1)}{2} \times \frac{1}{2^{d}} \]
&lt;/div>
&lt;p>[Lets simplify the problem approximating the result]&lt;/p>
&lt;div class="has-mathjax">
\[ 1 \approx \frac{m^{2}}{2^{d}} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ m^{2} = 2^{d} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ m = 2^{d/2} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ 2^{112} = 2^{d/2} \]
&lt;/div>
&lt;div class="has-mathjax">
\[ d \ge 224 \]
&lt;/div>
&lt;hr>
&lt;p>Since WCR is a harder problem than CR, then lets set &lt;span class="has-mathjax">\( d \ge 112 \)&lt;/span>
.&lt;/p>
&lt;p>Long story short, we have this constraints for each property:&lt;/p>
&lt;ul>
&lt;li>No PR, No CR, and No WCR &lt;br>
&lt;span class="has-mathjax">\( d \ge 1 \)&lt;/span>
&lt;/li>
&lt;li>PR, No CR, and WCR &lt;br>
&lt;span class="has-mathjax">\( d \ge 112 \)&lt;/span>
&lt;/li>
&lt;li>PR, CR, and WCR &lt;br>
&lt;span class="has-mathjax">\( d \ge 224 \)&lt;/span>
&lt;/li>
&lt;/ul>
&lt;h3 id="applications">Applications&lt;/h3>
&lt;p>There are multiple things that are desirable depending on the application that we need. For this I will briefly describe some scenarios.&lt;/p>
&lt;h4 id="1-server-side-authentication">1. Server-side authentication&lt;/h4>
&lt;p>A common problem addressed with hash functions is the storage of credentials for user authentication, the worst kind of approach that you can do is store the plaintext password in your databases, as this can lead to unintended exposure of passwords from an information leakage, leaving your users insecure, as people usually leave the same passwords in other services and can cause an unintended access to their personal data.&lt;/p>
&lt;p>A somewhat better approach to this is to store the hash output from the plaintext password, meaning that you will not know what was the original password used for any user, BUT if you have a data leakage and those hashes get exposed, there is still a way to be vulnerable of knowing the password. Turns out that you can do a &lt;em>dictionary attack&lt;/em>, which consists of a table of password-hash pairs with the most common passwords used in web services, that way you can query a password that yields that specific hash, it does not even have to be the same password! as there can be collitions as we already saw previously.&lt;/p>
&lt;p>The most common and advised way of dealing with this is to store the hash and a &lt;strong>salt&lt;/strong> value, which is just a random number generated at the creation of the field.
&lt;div class="has-mathjax">
\[ \text{hash} = h(\text{password} || \text{salt}) \]
&lt;/div>
&lt;/p>
&lt;p>That way a dictionary attack is useless.&lt;/p>
&lt;h4 id="2-file-integrity">2. File integrity&lt;/h4>
&lt;p>Another common thing to check is the integrity of a file, in this scenario you will have two things: a file and a text file containing the hash value for that file. On common use case for this is when you are downloading a file from the web and for some reason it gets corrupted in transit, therefore there is a lot of places that publish the hash alongside the download button.&lt;/p>
&lt;figure class="center" >
&lt;img src="https://aanzolaavila.github.io/img/ubuntu-file-integrity-check.png" alt="File integrity check" style="width:60%;" />
&lt;figcaption class="center" >Ubuntu file integrity checking from its download page&lt;/figcaption>
&lt;/figure>
&lt;p>Q: What property is desirable for this use case?
A: WCR, as we already have the input for the function (the file), it should be infeasible to find another input that yields the same hash output.&lt;/p>
&lt;hr>
&lt;h2 id="bonus">Bonus&lt;/h2>
&lt;p>There is an additional property not often discussed: &lt;strong>Non-malleability&lt;/strong>.&lt;/p>
&lt;blockquote>
&lt;p>Given &lt;span class="has-mathjax">\( y = h(x) \)&lt;/span>
, it should be &lt;em>infeasible&lt;/em> to compute: &lt;div class="has-mathjax">
\[ y^{\prime} = h(f(x)) \]
&lt;/div>
Such that &lt;span class="has-mathjax">\( y = y^{\prime} \)&lt;/span>
, where &lt;span class="has-mathjax">\( f \)&lt;/span>
is a simple function, such as &lt;span class="has-mathjax">\( h(x+1) ; h(2x) \)&lt;/span>
.&lt;/p>
&lt;/blockquote>
&lt;p>Not every hash function has this property.&lt;/p>
&lt;p>Turns out that there is two known types of hash functions with different types of contruction: Merkle-Damgard construction (MD5, SHA-1, SHA2), and Sponge construction (SHA3).&lt;/p>
&lt;p>Merkle-Damgard computes the hash iteratably with blocks, processing a chunk of the input information at a time, meaning that an input is &lt;span class="has-mathjax">\( m = m_{1} || m_{2} || \cdots || m_{l} \)&lt;/span>
, therefore, the hash function iterates through it like this &lt;span class="has-mathjax">\( y_{i} = h(y_{i-1}, m_{i}) \)&lt;/span>
and &lt;span class="has-mathjax">\( h(m) = y_{l} \)&lt;/span>
, each block is a fixed size, if the input size is not a multiple of the block size, there is a padding added at the end that does not alter the output of the entire function (i.e. a bunch of zeros to complete the block).&lt;/p>
&lt;p>In particular, Merkle-Damgard construction is susceptible to a Length Extension Attack (LEA), which comes from that padding, in particular if we give the hash function more blocks that are filled with zeroes, it will yield the same result&lt;/p>
&lt;div class="has-mathjax">
\[ h(m_{1} || \cdots || m_{l}) = h(m_{1} || \cdots || m_{l} || \text{0000000}) \]
&lt;/div>
&lt;p>Meaning &lt;span class="has-mathjax">\( y = y^{\prime} \)&lt;/span>
, violating the property.&lt;/p>
&lt;p>Checking this on actual code, if we use a library implementation of these hash functions we can check if this happens. So I set out an example written in Go.&lt;/p>
&lt;p>&lt;strong>Code&lt;/strong>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;crypto/md5&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hash&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">md5&lt;/span>.&lt;span style="color:#a6e22e">New&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>{&lt;span style="color:#ae81ff">0x0&lt;/span>, &lt;span style="color:#ae81ff">0x1&lt;/span>, &lt;span style="color:#ae81ff">0x2&lt;/span>, &lt;span style="color:#ae81ff">0x3&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">out&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">hash&lt;/span>.&lt;span style="color:#a6e22e">Sum&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> = &lt;span style="color:#a6e22e">out&lt;/span>[:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Before %x\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">moreData&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>{&lt;span style="color:#ae81ff">0x0&lt;/span>, &lt;span style="color:#ae81ff">0x0&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> = append(&lt;span style="color:#a6e22e">data&lt;/span>, &lt;span style="color:#a6e22e">moreData&lt;/span>&lt;span style="color:#f92672">...&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">hash&lt;/span>.&lt;span style="color:#a6e22e">Write&lt;/span>(&lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">out&lt;/span> = &lt;span style="color:#a6e22e">hash&lt;/span>.&lt;span style="color:#a6e22e">Sum&lt;/span>(&lt;span style="color:#66d9ef">nil&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">data&lt;/span> = &lt;span style="color:#a6e22e">out&lt;/span>[:]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;After %x\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">data&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Run it with &lt;code>$ go run main.go&lt;/code>, assuming that you are in a Unix environment.&lt;/p>
&lt;p>&lt;strong>Output&lt;/strong>&lt;/p>
&lt;pre tabindex="0">&lt;code>Before 37b59afd592725f9305e484a5d7f5168
After 50cca4f19a66632fb7a417364ad05153
&lt;/code>&lt;/pre>&lt;p>Why is this &amp;lsquo;attack&amp;rsquo; not working? This kind of scenario was already addressed with something called &lt;em>padding&lt;/em>, for this &lt;a href="https://en.wikipedia.org/wiki/Merkle%E2%80%93Damg%C3%A5rd_construction#Length_padding_example">Wikipedia&lt;/a> already sets a good example of this.&lt;/p>
&lt;hr>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>This was an interesting post to write, not only I wrote about something that I find very interesting, but also something that may be useful/interesting to someone else that may find it, I&amp;rsquo;m pretty sure I would have loved to find this kind of explanations when I was first dwelving into these subjects.&lt;/p></content></item></channel></rss>